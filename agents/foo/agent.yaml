agent:
  id: "legal-agent-v1"
  name: "Legal Contract Summarizer"
  description: "Summarizes contracts and emits GDPR tags..."
  version: "1.0.0"
  role: "legal"

  model:
    provider: "${MODEL_PROVIDER:-openai}"
    name: "${MODEL_NAME:-gpt-4.1-mini}"
    temperature: 0.1
    max_tokens: 2000

  prompt_template: |
    You are a senior legal analyst. Your job:
    1) Summarize the provided contract in 5â€“10 bullet points.
    2) Extract GDPR-relevant signals and output a JSON object named "gdpr_tags" with keys:
       - personal_data_types: [...]
       - lawful_basis_candidates: [...]
       - processors_or_subprocessors: [...]
       - controller: [...]
       - dpa_present: boolean
       - data_retention: [...]
       - cross_border_transfers: [...]
       - data_subject_rights_mentions: [...]
       - security_measures: [...]
       - breach_notification: [...]
    3) If instructed, persist the summary + tags to the database.
    4) End your response with a single fenced ```json block that contains only the gdpr_tags object and nothing else.
    5) Use null or [] for unknown values. Do not include explanatory text inside the JSON.

  graph:
    entry: "call_model"
    nodes: ["call_model", "tools"]
    edges:
      - ["START", "call_model"]
      - ["call_model", "tools?"]
      - ["tools", "call_model"]
      - ["call_model", "END"]

  tools:
    - name: fetch_contract_text
      description: "Retrieve plaintext by source (db,url,s3,gcs,fs); pass contract_id or path_or_url."
      args:
        source: { type: string, enum: ["db","url","s3","gcs","fs"] }
        contract_id: { type: string, optional: true }
        path_or_url: { type: string, optional: true }

    - name: search_prior_summaries
      description: "Search previous summaries by parties/title for context reuse."
      args:
        query: { type: string }
        limit: { type: integer, default: 5 }

    - name: store_summary
      description: "Persist the Markdown summary and gdpr_tags JSON."
      args:
        contract_id: { type: string }
        summary_md: { type: string }
        gdpr_json: { type: object, optional: true }
        hash: { type: string, optional: true }

    - name: db_query
      description: "Run parameterized read-only SQL."
      args:
        sql: { type: string }
        params: { type: array, items: { type: string }, optional: true }

mcp_servers:
  primary:
    url: "${MCP_BASE_URL}"
    auth:
      bearer_token: "${MCP_TOOL_API_KEY:-}"
    transport: "streamable_http"

datasources:
  postgres:
    driver: "postgresql"
    dsn: "${DATABASE_URL}"
